---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: pipeline-test
spec:
  inputs:
    resources:
      - name: plumbing-git
        type: git
      - name: tektoncd-pipeline-git
        type: git
    params:
    - name: IMAGE_NAME
      description: The bootstrap image with all the tools needed
    - name: UPLOADER_HOST
      description: GO Simple Uploader hostname
    - name: CLUSTER_NAME
      description: Cluster name
  steps:
  - name: apply-patches
    image: $(inputs.params.IMAGE_NAME)
    workingDir: $(inputs.resources.tektoncd-pipeline-git.path)
    script: |
      #!/usr/bin/env bash
      set -eu
      if [[ -d "$(inputs.resources.plumbing-git.path)/CI/tasks/components/pipeline/patches" ]];then
        for patch in $(inputs.resources.plumbing-git.path)/CI/tasks/components/pipeline/patches/*;do
            [[ ${patch} != *patch && ${patch} != *diff ]] && continue
            echo "Applying patch $(basename ${patch})"
            patch -p1 -i ${patch}
        done
      fi
  - name: get-kubeconfig
    env:
    - name: UPLOADER_USERNAME
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: uploader-username
    - name: UPLOADER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: uploader-password
    image: registry.access.redhat.com/ubi8/ubi-minimal:latest
    script: |
      #!/usr/bin/env bash
      set -eu
      mkdir -p /workspace/kube
      curl -o /workspace/kube/config \
           -u ${UPLOADER_USERNAME}:${UPLOADER_PASSWORD} \
           $(inputs.params.UPLOADER_HOST)/private/CI/$(inputs.params.CLUSTER_NAME)/kubeconfig
  - name: go-tests
    env:
    - name: UPLOADER_USERNAME
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: uploader-username
    - name: UPLOADER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: uploader-password
    image: $(inputs.params.IMAGE_NAME)
    workingDir: $(inputs.resources.tektoncd-pipeline-git.path)
    script: |
      #!/usr/bin/env bash
      set -eu
      TIMESTAMP=$(date '+%Y%m%d-%Hh%M-%S')
      NS=tekton-pipeline-tests-${TIMESTAMP}
      failed=0
      export BUILD_NUMBER=1

      export KUBECONFIG=/workspace/kube/config

      oc new-project ${NS}

      source test/e2e-common.sh

      #kubectl get ns|grep arendelle|awk '{print $1}'|xargs kubectl delete ns
      #export TEST_KEEP_NAMESPACES=true

      # Run the integration tests
      header "Running Go e2e tests"

      /usr/local/go/bin/go test -v -failfast -timeout=30m -count=1 -tags=e2e \
        -ldflags '-X github.com/tektoncd/pipeline/test.missingKoFatal=false -X github.com/tektoncd/pipeline/test.skipRootUserTests=true' \
        ./test -timeout=20m --kubeconfig=${KUBECONFIG}  || failed=1


      (( failed )) && fail_test

      header "Cleaning up test namespaces"
      kubectl delete ns ${NS}
      for i in $(kubectl get ns|grep '^arendelle'|awk '{print $1}');do
        kubectl delete ns ${i} || true
      done

      success
  - name: yaml-tests
    env:
    - name: UPLOADER_USERNAME
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: uploader-username
    - name: UPLOADER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: uploader-password
    image: $(inputs.params.IMAGE_NAME)
    workingDir: $(inputs.resources.tektoncd-pipeline-git.path)
    script: |
      #!/usr/bin/env bash
      set -eu
      # pipelinerun does way way too much kubernetes specifics stuff with a cluster-admin...
      # TODO: sidecar-ready is failing due of readinessprobe not doign its work, let's investigate this later
      declare -ar SKIP_YAML_TEST=(pipelinerun
                                  sidecar-ready
                                  git-volume
                                  dind-sidecar
                                  pull-private-image
                                  build-push-kaniko
                                  build-gcs-targz
                                  build-gcs-zip
                                  gcs-resource)

      TIMESTAMP=$(date '+%Y%m%d-%Hh%M-%S')
      NS=tekton-pipeline-tests-yaml-${TIMESTAMP}
      failed=0
      export BUILD_NUMBER=1
      export KUBECONFIG=/workspace/kube/config
      oc new-project ${NS}

      # We do this so cloudevent would know where to go for our namespace...
      sed -i  "s/sink.default/sink.${NS}/"  ./examples/taskruns/cloud-event.yaml

      # We should find a way to exclude install_pipeline_crd and be able to run
      # e2e-tests.sh directly
      source test/e2e-common.sh

      MAX_CONCURRENT_TEST=2

      function run_batched_yaml_tests() {
          local resource=$1
          echo ">> Creating resources ${resource}"

          cnt=1
          runtasks=()

          # Applying the resources, either *taskruns or * *pipelineruns
          for file in $(find ./examples/${resource}s -name '*.yaml' -not -path "*/no-ci/*" | sort); do
              skipit=False
              reltestname=$(basename $file|sed 's/.yaml//')
              for skip in ${SKIP_YAML_TEST[@]};do
                  [[ ${reltestname} == ${skip} ]] && skipit=True
              done
              [[ ${skipit} == True ]] && {
                  echo ">>> INFO: skipping yaml test ${reltestname}"
                  continue
              }
              echo ">>> Creating ${resource}/${reltestname}"
              runtasks+=(${reltestname})
              kubectl delete -n ${NS} -f ${file} >/dev/null 2>/dev/null || true
              kubectl create -n ${NS} -f ${file} >/dev/null || return 1
              [[ ${cnt} == ${MAX_CONCURRENT_TEST} ]] && {
                  if ! run_tests ${1}; then
                      echo "FAILURE: "
                      return 1
                  fi
                  echo "Done!!"
                  sleep 2
                  cnt=1
                  for yamltest in ${runtasks[@]};do
                      echo ">> Cleaning up ${resource}/${yamltest}"
                      # We have so many OOMKILLED in that cluster that i rather cleanup as much as possible
                      kubectl delete ${resource} -n ${NS} --all >/dev/null || true
                      kubectl delete all -n ${NS} --all >/dev/null || true
                      kubectl delete -n ${NS} -f ./examples/${resource}s/${yamltest}.yaml 2>/dev/null >/dev/null || true
                  done
                  runtasks=()
              }
              (( cnt+=1 ))
          done
          return 0
      }


      failed=0
      for test in taskrun pipelinerun; do
        header "Running YAML e2e tests for ${test}s"

        flakyness=0
        while [[ ${flakyness} < 3 ]];do
           if ! run_batched_yaml_tests ${test}; then
              REASONS=$(kubectl get -o json ${test} -n ${NS} | python -c 'import json,sys;j = json.loads(sys.stdin.read());print("|".join([ x["status"]["conditions"][0]["message"] for x in j["items"]]))')
              if [[ "${REASONS}" == *OOMKilled* ]];then
                  kubectl delete -n ${NS} ${test} --all
                  (( flakyness+=1 ))
                  continue
              fi


              echo ">>> ERROR: one or more YAML tests failed"
              output_yaml_test_results ${test}
              output_pods_logs ${test}
              failed=1
           fi
           break
        done

      done

      (( failed )) && fail_test

      kubectl delete ns ${NS}
      success
